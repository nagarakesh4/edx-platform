def runPythonTests() {
    // Determine git refspec, branch, and clone type
    git_branch = xdist_git_branch()
    git_refspec = xdist_git_refspec()
    sshagent(credentials: ['jenkins-worker'], ignoreMissing: true) {
        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: git_branch]],
            doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', honorRefspec: true,
            noTags: true, shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-worker',
            refspec: git_refspec, url: "git@github.com:philanthropy-u/${REPO_NAME}.git"]]]
        console_output = sh(returnStdout: true, script: 'bash scripts/all-unit-tests.sh').trim()
        dir('stdout') {
            writeFile file: "${TEST_SUITE}-stdout.log", text: console_output
        }
        stash includes: 'reports/**/*coverage*', name: "${TEST_SUITE}-reports"
    }
}

def pythonTestCleanup() {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/**/*,test_root/log/**/*.log,**/nosetests.xml,stdout/*.log,*.log'
    junit '**/nosetests.xml'
    sh '''source $HOME/edx-venv/bin/activate
    bash scripts/xdist/terminate_xdist_nodes.sh'''
}

def xdist_git_branch() {
    if (env.ghprbActualCommit) {
        return "${ghprbActualCommit}"
    } else {
        return "${BRANCH_NAME}"
    }
}

def xdist_git_refspec() {
    if (env.ghprbActualCommit) {
        return "+refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/*"
    } else {
        return "+refs/heads/${BRANCH_NAME}:refs/remotes/origin/${BRANCH_NAME}"
    }
}

pipeline {
    agent { label "master" }
    options {
        timestamps()
        timeout(250)
    }
    environment {
        XDIST_GIT_BRANCH = xdist_git_branch()
        XDIST_GIT_REFSPEC = xdist_git_refspec()
        XDIST_INSTANCE_TYPE = "c5d.large"
        XDIST_WORKER_AMI = credentials('XDIST_WORKER_AMI')
        XDIST_WORKER_IAM_PROFILE_ARN = credentials('XDIST_WORKER_IAM_PROFILE_ARN')
        XDIST_WORKER_KEY_NAME = "jenkins-worker"
        XDIST_WORKER_SUBNET = credentials('XDIST_WORKER_SUBNET')
        XDIST_WORKER_SECURITY_GROUP = credentials('XDIST_WORKER_SECURITY_GROUP')
        WTW_CONTEXT = "python"
    }
    stages {
        
                stage("lms-unit") {
                    // agent { label "jenkins-worker" }
                    environment {
                        TEST_SUITE = "lms-unit"
                        XDIST_NUM_WORKERS = 10
                        XDIST_REMOTE_NUM_PROCESSES = 1
                    }
                    steps {
                      echo "DONE"
                    }
                }    
            
        
    }
}
