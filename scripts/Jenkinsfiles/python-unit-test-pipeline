def runPythonTests() {
    git_branch = xdist_git_branch()
    git_refspec = xdist_git_refspec()
    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: git_branch]],
            doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', honorRefspec: true,
            noTags: true, shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-worker',
            refspec: git_refspec, url: "git@github.com:philanthropy-u/${REPO_NAME}.git"]]]
    console_output = sh(returnStdout: true, script: 'bash scripts/all-unit-tests.sh').trim()
}

def pythonTestCleanup() {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/**/*,test_root/log/**/*.log,**/nosetests.xml,stdout/*.log,*.log'
    junit '**/nosetests.xml'
    sh '''source $HOME/edx-venv/bin/activate
    bash scripts/xdist/terminate_xdist_nodes.sh'''
}

def xdist_git_branch() {
    if (env.ghprbActualCommit) {
        return "${ghprbActualCommit}"
    } else {
        return "${BRANCH_NAME}"
    }
}

def xdist_git_refspec() {
    if (env.ghprbActualCommit) {
        return "+refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/*"
    } else {
        return "+refs/heads/${BRANCH_NAME}:refs/remotes/origin/${BRANCH_NAME}"
    }
}

pipeline {
    agent { label "jenkins-worker" }
    options {
        timestamps()
        timeout(900)
    }
    stages {
        
        stage('Mark build as pending on Github') {
            when {
                 expression { env.ghprbActualCommit == null }
            }
            steps {
                script {
                    commit_sha = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    build job: 'github-build-status',
                        parameters: [
                            string(name: 'GIT_SHA', value: commit_sha),
                            string(name: 'GITHUB_ORG', value: 'philanthropy-u'),
                            string(name: 'GITHUB_REPO', value: "${REPO_NAME}"),
                            string(name: 'TARGET_URL', value: "${BUILD_URL}"),
                            string(name: 'DESCRIPTION', value: 'Pending'),
                            string(name: 'CONTEXT', value: "${GITHUB_CONTEXT}"),
                            string(name: 'CREATE_DEPLOYMENT', value: 'false'),
                            string(name: 'BUILD_STATUS', value: 'pending')
                        ],
                        propagate: false, wait: false
                }
            }
        }
        stage('test') {
            steps {
                script {
                sh """#!/bin/bash
                sudo apt-get update && sudo apt-get -y sudo dist-upgrade && \
                sudo apt-get -y --no-install-recommends install sudo git python virtualenv python-dev build-essential libmysqlclient-dev libffi-dev libssl-dev openssh-client
                sudo pip install -r requirements/edx/base.txt
                """
                }
            }
        }
    }
}